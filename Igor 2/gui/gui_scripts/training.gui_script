require "main_menu.ui_func"

function init(self)
	gui.set_enabled(gui.get_node("background"), false)
	
	--msg.post("default:/training#training", "swipe_up")
	
	self.hovered_node = nil
	self.picked_node = nil

	self.nodes = {
		{
			node = gui.get_node("ok_button"),
			action = function () 
				pause_state = false
				gui.set_enabled(gui.get_node("background"), false)

				msg.post(".", "release_input_focus")
				msg.post("default:/hud#level_proxy", "set_time_step", {factor = 1, mode = 1})
				msg.post("level:/controller#script", "pause_state", {value = false})

				if gui_log then
					print("Нажата кнопка ok")
				end
			end
		}
	}

	init_ui(self)
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	--[[if message_id == hash("show") then
		local node = gui.get_node("background")
		gui.set_enabled(node, true)
		
		msg.post(".", "acquire_input_focus")
	end]]
	--Не забыть про training_state при отправке сообщений из контроллера(наверное)
	if message_id == hash("swipe_right") then
		pause_state = true
		gui.set_enabled(gui.get_node("background"), true)
		gui.play_flipbook(gui.get_node("hint"), "swipe_right")
		
		msg.post(".", "acquire_input_focus")
		msg.post("default:/hud#level_proxy", "set_time_step", {factor = 0, mode = 1})
		msg.post("level:/controller#script", "pause_state", {value = true})
	elseif message_id == hash("swipe_up") then
		pause_state = true
		gui.set_enabled(gui.get_node("background"), true)
		gui.play_flipbook(gui.get_node("hint"), "swipe_up")
		
		msg.post(".", "acquire_input_focus")
		msg.post("default:/hud#level_proxy", "set_time_step", {factor = 0, mode = 1})
		msg.post("level:/controller#script", "pause_state", {value = true})
	elseif message_id == hash("swipe_down") then
		pause_state = true
		gui.set_enabled(gui.get_node("background"), true)
		gui.play_flipbook(gui.get_node("hint"), "swipe_down")

		msg.post(".", "acquire_input_focus")
		msg.post("default:/hud#level_proxy", "set_time_step", {factor = 0, mode = 1})
		msg.post("level:/controller#script", "pause_state", {value = true})
	end
end

function on_input(self, action_id, action)
	if action_id == hash("click") or action_id == hash("touch") then
		if action.pressed then
			handle_press(self, action.x, action.y)
		end
		if action.released then
			handle_click(self, action.x, action.y)
		end
	end

	handle_hover(self, action.x, action.y)

	-- As long as we're listening to input, we're gonna consume it.
	-- This disables game controls while the pause menu is showing.
	return true
end