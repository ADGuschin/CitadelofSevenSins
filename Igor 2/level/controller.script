require "level.obstacle_table"
require "level.utils"
-- controller.script
local grid = 600
local platform_height = 48
local default_speed = 360
local score = 0
local pause_state = false
local max_speed = 1500
local obstacle_var = 0

local previous_obstacle

acceleration = 20;

function table_length(self, table)
    local count = 0
    for x in pairs(table) do count = count + 1 end
    return count
end

function init(self)
    self.speed = default_speed
    update_speed(self)
    --msg.post("/controller#script", "set_speed", { speed = self.speed })
    self.gridw = 0
    self.spawns = {}
    self.heroes = {}
    previous_obstacle = obstacle_table["init"][math.random(table_length(self, obstacle_table["init"]))]
    --local p = factory.create("#herofactory",vmath.vector3(300, 200, 0), nil,{},5)
    --table.insert(self.spawns, p)
    msg.post("#", "spawnhero")
    print(msg.url())
end


function update(self, dt)
    self.gridw = self.gridw + self.speed * dt
    self.speed = self.speed + acceleration * dt
    update_speed(self)
    if self.gridw >= grid then
        self.gridw = 0
        local h = platform_height
        local allowed_obstacles = obstacle_table[previous_obstacle]
        local random = math.random(table_length(self, allowed_obstacles))
        previous_obstacle = allowed_obstacles[random]
        local p = collectionfactory.create(previous_obstacle, vmath.vector3(1600, h, 0), nil, {}, 5)
        
        --table.insert(self.spawns,{[obstacle_var] = p})
       --[[ for x in pairs(p) do
            print(x)
            msg.post(x, "set_speed", { speed = self.speed })
            table.insert(self.spawns, x) 
        end]]
    end
    if not pause_state then
        score = score + self.speed / 10000
        msg.post("/score#score", "score", {value = math.ceil(score)})
    end
    --[[for i,p in ipairs(self.spawns) do
        msg.post(p,"set_speed",{speed = self.speed })
    end]]
end

function on_message(self, message_id, message, sender)
    if message_id == hash("id_request") then
        table.insert(self.spawns,{[obstacle_var] = message.url})
        obstacle_var = obstacle_var + 1
    elseif message_id == hash("spawnhero") then
        local p = factory.create("#herofactory",vmath.vector3(300, 200, 0), nil,{},5)
        table.insert(self.heroes, p)
        score = 0 
    elseif message_id == hash("reset") then 
        -- Tell the hero to reset.
        self.speed = default_speed
        msg.post(sender, "reset")
        msg.post("background3/controller#background3", "reset")
        -- Delete all platforms
        for i,p in ipairs(self.spawns) do
            go.delete(p)
        end
        for i,p in ipairs(self.heroes) do
            go.delete(p)
        end
        self.spawns = {}
        self.heroes = {}
    elseif message_id == hash("delete_spawn") then
        go.delete(message.url)
        table.remove(self.spawns, message.id)
        --[[for i,p in ipairs(self.spawns) do
            if  == message.id then
                print("ЭЗЩКЕРЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕ")
                table.remove(self.spawns, i)
                go.delete(p)
            end
        end--]]
    elseif message_id == hash("reset_speed") then
        self.speed = self.speed * 0.66
        if self.speed < default_speed then
            self.speed = default_speed
        elseif self.speed > max_speed then
            self.speed = max_speed
        end
    elseif message_id == hash("pause_state") then
        pause_state = message.value
    elseif message_id == hash("speed_request") then
        msg.post(sender, "set_speed", { speed = self.speed })
    end
end

function update_speed(self)
    msg.post("ground/controller#script", "set_speed", { speed = self.speed })
    msg.post("background1/controller#script", "set_speed", { speed = self.speed })
    msg.post("background2/controller#script", "set_speed", { speed = self.speed })
    msg.post("background3/controller#background3", "set_speed", { speed = self.speed })
end