require "main_menu.collection_proxy_content"
require "main_menu.ui_func"

function init(self)
    msg.post(".", "acquire_input_focus")
    --gui.set_color(gui.get_node("exit_button"), self.normal_color);
    --gui.set_color(gui.get_node("start_button"), self.normal_color);
    self.hovered_node = nil
	self.picked_node = nil
	--local d = 0.4
	--anim1(gui.get_node("background"), d)
    self.nodes = {
					{
						node = gui.get_node("start_button"),
						action = function () msg.post("start_scene:/collection_proxy_controller#collection_proxy_controller", "load", {proxy = "#main_proxy"}) end
					},
					{
						node = gui.get_node("exit_button"),
						action = function () msg.post("@system:", "exit", {code = 0}) end 
					},
					{
						node = gui.get_node("settings_button"),
						action = function () msg.post("/settings#settings", "show") end
						--action = function () msg.post("/settings", "show") end 
					},
				}
				
	init_ui(self)
end

function final(self)
	msg.post(".", "release_input_focus")
	msg.post("start_scene:/sound#sound", "sound_off");
end
	
function on_input(self, action_id, action)
    if action_id == hash("click") or action_id == hash("touch") then
    	if action.pressed then
	    	handle_press(self, action.x, action.y)
    	end
    	if action.released then
			handle_click(self, action.x, action.y)
    	end
    end
	handle_hover(self, action.x, action.y)
end

--[[local function anim1(node, d)
	-- set scale to 70%
	local start_scale = 0.7
	gui.set_scale(node, vmath.vector4(start_scale, start_scale, start_scale, 0))

	-- get current color and set alpha to 0 to fade up
	local from_color = gui.get_color(node)
	local to_color = gui.get_color(node)
	from_color.w = 0
	gui.set_color(node, from_color)

	-- animate alpha value from 0 to 1
	gui.animate(node, gui.PROP_COLOR, to_color, gui.EASING_IN, 0.2, d)

	-- animate scale from %70 to 110%
	local s = 1.1
	gui.animate(node, gui.PROP_SCALE, vmath.vector4(s, s, s, 0), gui.EASING_IN, 0.2, d, anim2)
end]]