require "main_menu.ui_func"

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("#level_proxy", "load")

	if gui_log then
		print("HUD интерфейс проинициализирован, загружен прокси level коллекции")
	end
	
	self.hovered_node = nil
	self.picked_node = nil

	--[[if not sound_off then
		msg.post("start_scene:/sound#sound", "sound_on")
	end]]

	--[[if sound_off then
		gui.play_flipbook(gui.get_node("sound_button"), "1600")
	else
		msg.post("start_scene:/sound#sound", "sound_on")
		gui.play_flipbook(gui.get_node("sound_button"), "Volume_up_font_awesome.svg")
	end]]
	
	self.nodes = {
					{
						node = gui.get_node("pause_button"),
						action = function () 
							pause_state = true
							gui.set_enabled(gui.get_node("pause_button"), false)
							
							msg.post("/pause_screen", "show")
							msg.post("level:/score#score", "hide")
							msg.post("#level_proxy", "set_time_step", {factor = 0, mode = 1})
							msg.post("level:/controller#script", "pause_state", {value = true})

							if gui_log then
								print("Нажата кнопка паузы, level прокси поставлен на паузу, скрыт интерфейс очков, скрыта кнопка паузы")
							end
						end
					}
				}
	
	init_ui(self)
	
end

function final(self)
	msg.post(".", "release_input_focus")
	--msg.post("start_scene:/sound#sound", "sound_off")
end

function on_message(self, message_id, message, sender)
	if message_id == hash("proxy_loaded") then
		msg.post(sender, "enable")
		
		if gui_log then
			print("Пришло сообщение о том, что прокси загружен от", sender, " Хз зачем оно вообще")
		end
	elseif message_id == hash("resume") then
		pause_state = false
		msg.post("#level_proxy", "set_time_step", {factor = 1, mode = 1})
		msg.post("level:/controller#script", "pause_state", {value = false})
		msg.post("level:/score#score", "show")
		gui.set_enabled(gui.get_node("pause_button"), true)

		if gui_log then
			print("Пришло сообщение в hud интерфейс о продолжении игры от", sender, "level прокси убран с паузы, показан интерфейс очков, показана кнопка паузы")
		end
	elseif message_id == hash("check_for_pause") then
		msg.post(sender, "pause_state", {value = pause_state})
		
		--[[if gui_log then
			print("Пришло сообщение с запросом состояния паузы от", sender, "Состояние паузы отправлено обратно")
		end]]
	elseif message_id == hash("death_pause") then
		if message.value then
			pause_state = true
			msg.post("level:/controller#script", "pause_state", {value = true})
			gui.set_enabled(gui.get_node("pause_button"), false)
		else
			pause_state = false
			msg.post("level:/controller#script", "pause_state", {value = false})
		end

		if gui_log then
			print("Пришло сообщение в hud интерфейс о состоянии паузы во время смерти от", sender, "В controller отправлено состояние паузы - ", pause_state)
		end
	end
end

function on_input(self, action_id, action)
	if action_id == hash("click") or action_id == hash("touch") then
		if action.pressed then
			handle_press(self, action.x, action.y)
		end
		if action.released then
			handle_click(self, action.x, action.y)
		end
	end
	
	handle_hover(self, action.x, action.y)
end