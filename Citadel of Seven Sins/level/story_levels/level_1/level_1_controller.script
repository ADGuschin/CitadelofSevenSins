require "level.obstacle_table"
require "level.utils"
require "variables"
-- controller.script
local grid = 600
local grido = 2100
local platform_height = 48
local default_speed = 450

local max_speed = 1500
local obstacle_var = 0
local reset_timer = 0
local reset_timer_max = 5
local current_hero

local current_dt

local previous_obstacle
table_backgrounds_objects = {"#garage","#barrel","#tent_1","#tent_2","#tent_3","#tent_4"}




function init(self)
	--index_of_current_level = 1 -- пока что захардкодил для теста
	--current_level = list_of_levels[index_of_current_level]
	window.set_dim_mode(window.DIMMING_OFF)
	print(current_level)
	self.speed = default_speed
	update_speed(self)
	self.gridw = 0
	self.gridbackground = 0
	collectionfactory.create("#story1", vmath.vector3(1600, 48, 0), nil, {}, 1)
	factory.create("#boss", vmath.vector3(1200, 180, 0), nil,{},1)
	msg.post("#", "spawnhero")
end


function check_for_reset(self)
	if reset_timer < reset_timer_max then
		reset_timer = reset_timer + 1
	else 
		--print('hihi')
		reset = false
	end
end


function calculate_score(self)
	if not pause_state then
		score = score + self.speed / 10000
		current_progress = current_progress + self.speed * current_dt
		msg.post("/score#score", "progress", {value = math.ceil(current_progress*100/level_progress[current_level])})
		msg.post("/score#score", "score", {value = math.ceil(score)})
		msg.post("/score#score", "coins", {value = coins})
	end
end

function update(self, dt)
	current_dt = dt
	self.gridw = self.gridw + self.speed * dt
	self.gridbackground = self.gridbackground + ((self.speed * 200) / 360) * dt
	if self.gridbackground >= grido then
		self.gridbackground = 0
		local indx = math.random(1,6)
		local obj = table_backgrounds_objects[indx]
		pprint(indx)
		pprint(obj)
	end
	if self.speed < max_speed then 
		self.speed = self.speed + acceleration * dt
	end
	--update_speed(self)
	check_for_reset(self)
	
	calculate_score(self)

end

function on_message(self, message_id, message, sender)
	if message_id == hash("spawnhero") then
		local p = factory.create("#herofactory",vmath.vector3(300, 142, 0), nil,{},1)
		--table.insert(self.heroes, p)
		if message.continue == nil then
			score = 0 
		end
	elseif message_id == hash("spawned") then
		current_hero = sender
	elseif message_id == hash("continue") then
		msg.post(current_hero, "continue")
	elseif message_id == hash("reset") then 
		save_gamedata()
		training_state = next_try_is_training
		next_try_is_training = false
		-- Tell the hero to reset.
		reset = true
		reset_timer = 0
		self.speed = default_speed
		--collectionfactory.create("#story1", vmath.vector3(1600, 48, 0), nil, {}, 1)
		msg.post("#", "spawnhero")
		msg.post("background3/controller#background3", "reset")
		msg.post("bacground3_loop/controller#background3_loop", "reset")
		
	elseif message_id == hash("reset_speed") then
		self.speed = self.speed * 0.77
		if self.speed < default_speed then
			self.speed = default_speed
		elseif self.speed > max_speed then
			self.speed = max_speed
		end
	elseif message_id == hash("speed_request") then
		msg.post(sender, "set_speed", { speed = self.speed })
	elseif message_id == hash("death") then
		training_state = next_try_is_training
		next_try_is_training = false
		if training_state then
			previous_obstacle = "training"
		else
			previous_obstacle = "init"
		end
		msg.post("default:/death_screen#death_screen", "score", {value = math.ceil(score)})
	end
end

function update_speed(self)
	msg.post("background1/controller#script", "set_speed", { speed = self.speed })
	msg.post("background2/controller#script", "set_speed", { speed = self.speed })
	msg.post("background3/controller#background3", "set_speed", { speed = self.speed })
end