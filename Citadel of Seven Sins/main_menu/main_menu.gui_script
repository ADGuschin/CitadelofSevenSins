require "main_menu.collection_proxy_content"
require "main_menu.ui_func"
require "variables"

local title = {
	start = { "Start", "Cтарт"},
	exit = { "Quit", "Выход"},
	level1 = { "Level 1", "Уровень 1"},
	level2 = { "Level 2", "Уровень 2"},
	back = { "Back", "Назад"},
	comingsoon = { "Coming soon..", "Скоро.."}
}

function init(self)
	if gui_log then
		print("Экран главного меню проинициализирован")
	end
	local node = gui.get_node("background")
	gui.animate(node, "position.x", -120, gui.EASING_INCUBIC, 100, 0, nil, gui.PLAYBACK_ONCE_BACKWARD)
	msg.post(".", "acquire_input_focus")

	gui.set_enabled(gui.get_node("selectlevel_box"), false)
	gui.set_enabled(gui.get_node("comingsoon_box"), false)
	
    --gui.set_color(gui.get_node("exit_button"), self.normal_color);
    --gui.set_color(gui.get_node("start_button"), self.normal_color);
    self.hovered_node = nil
	self.picked_node = nil
    self.nodes = {
					{
						node = gui.get_node("start_button"),
						action = function ()
							if gui.is_enabled(gui.get_node("box")) and gui.is_enabled(gui.get_node("menu_box")) then
								gui.set_enabled(gui.get_node("menu_box"), false)
								gui.set_enabled(gui.get_node("selectlevel_box"), true)

								if gui_log then
									print("Нажата кнопка старт, открыт интерфейс выбора уровня")
								end
							end
						end
					},
					{
						node = gui.get_node("exit_button"),
						action = function ()
							if gui.is_enabled(gui.get_node("box")) and gui.is_enabled(gui.get_node("menu_box")) then
								msg.post("@system:", "exit", {code = 0})

								if gui_log then
									print("Нажата кнопка выхода, приложение закрыто")
								end
							end
						end 
					},
					{
						node = gui.get_node("settings_button"),
						action = function ()
							if gui.is_enabled(gui.get_node("box")) then
								gui.set_enabled(gui.get_node("comingsoon_box"), false)
								gui.set_enabled(gui.get_node("box"), false)
								
								msg.post("/menu#settings", "show")

								if gui_log then
									print("Нажата кнопка настроек, скрыт интерфейс главного меню")
								end
							end
						end
					},
					{
						node = gui.get_node("level1_button"),
						action = function ()
							if gui.is_enabled(gui.get_node("box")) and gui.is_enabled(gui.get_node("selectlevel_box")) then
								in_game = true
								index_of_current_level = 1
								current_level = list_of_levels[index_of_current_level]

								msg.post("start_scene:/collection_proxy_controller#collection_proxy_controller", "load", {proxy = "#main_proxy"})

								if gui_log then
									print("Нажата кнопка первого уровня, загружен прокси main коллекции")
								end
							end
						end
					},
					{
						node = gui.get_node("level2_button"),
						action = function ()
							if gui.is_enabled(gui.get_node("box")) and gui.is_enabled(gui.get_node("selectlevel_box")) then
								--[[if gui.is_enabled(gui.get_node("comingsoon_box")) then
									gui.set_enabled(gui.get_node("comingsoon_box"), false)
								else
									gui.set_enabled(gui.get_node("comingsoon_box"), true)
								end]]
								
								
								in_game = true
								index_of_current_level = 2
								current_level = list_of_levels[index_of_current_level]
								
								msg.post("start_scene:/collection_proxy_controller#collection_proxy_controller", "load", {proxy = "#main_proxy"})
								

								if gui_log then
									print("Нажата кнопка второго уровня, выведена надпись Сoming soon")
								end
							end
						end
					},
					{
						node = gui.get_node("back_button"),
						action = function ()
							if gui.is_enabled(gui.get_node("box")) and gui.is_enabled(gui.get_node("selectlevel_box")) then
								gui.set_enabled(gui.get_node("menu_box"), true)
								gui.set_enabled(gui.get_node("selectlevel_box"), false)
								gui.set_enabled(gui.get_node("comingsoon_box"), false)

								if gui_log then
									print("Нажата кнопка назад, вернулись в главное меню")
								end
							end
						end 
					},
				}

		gui.set_text(gui.get_node("start_text"), title.start[language_state])
		gui.set_text(gui.get_node("exit_text"), title.exit[language_state])
		gui.set_text(gui.get_node("level1_text"), title.level1[language_state])
		gui.set_text(gui.get_node("level2_text"), title.level2[language_state])
		gui.set_text(gui.get_node("back_text"), title.back[language_state])
		gui.set_text(gui.get_node("comingsoon_text"), title.comingsoon[language_state])
				
	init_ui(self)
end

function final(self)
	msg.post(".", "release_input_focus")
end

function on_message(self, message_id, message, sender)
	if message_id == hash("show") then
		gui.set_enabled(gui.get_node("box"), true)

		gui.set_text(gui.get_node("start_text"), title.start[language_state])
		gui.set_text(gui.get_node("exit_text"), title.exit[language_state])
		gui.set_text(gui.get_node("level1_text"), title.level1[language_state])
		gui.set_text(gui.get_node("level2_text"), title.level2[language_state])
		gui.set_text(gui.get_node("back_text"), title.back[language_state])
		gui.set_text(gui.get_node("comingsoon_text"), title.comingsoon[language_state])
		
		msg.post(".", "acquire_input_focus")
		
		if gui_log then
			print("Пришло сообщение о включении интерфейса главного меню от", sender, "Показан интерфейс главного меню")
		end
	end
end
	
function on_input(self, action_id, action)
	if action_id == hash("back_clicked") then
		msg.post("@system:", "exit", {code = 0})
	end
    if action_id == hash("click") or action_id == hash("touch") then
    	if action.pressed then
	    	handle_press(self, action.x, action.y)
    	end
    	if action.released then
			handle_click(self, action.x, action.y)
    	end
	end
	
	handle_hover(self, action.x, action.y)
end

local function anim(node)
	--gui.animate(node, "position.x", 100, gui.EASING_IN, 1, gui.PLAYBACK_LOOP_BACKWARD)
	gui.animate(node, "position.x", 1000, vec, 4.0, 1, nil, gui.PLAYBACK_LOOP_BACKWARD)
end