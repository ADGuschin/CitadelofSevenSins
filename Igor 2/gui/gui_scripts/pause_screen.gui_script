require "main_menu.ui_func"

function init(self)
	-- Fetch background node and disable it.
	-- Everything is childed under it.
	local node = gui.get_node("background")
	gui.set_enabled(node, false)

	self.hovered_node = nil
	self.picked_node = nil
	
	self.nodes = {
					{
						node = gui.get_node("resume"),
						action = function () 
							local node = gui.get_node("background")
							gui.set_enabled(node, false)
							msg.post(".", "release_input_focus")
							msg.post("/hud", "resume")
						end
					},
					{
						node = gui.get_node("menu"),
						action = function () 
							local node = gui.get_node("background")
							gui.set_enabled(node, false)
							msg.post("start_scene:/collection_proxy_controller#collection_proxy_controller", "load", {proxy = "#main_menu_proxy"})
						end
					},
					{
						node = gui.get_node("settings_button"),
						action = function () msg.post("default:/settings#settings", "show") end
						--action = function () msg.post("/settings", "show") end  тоже работает
					},
				}
	
	init_ui(self)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("show") then
		-- First, show the pause menu.
		local node = gui.get_node("background")
		gui.set_enabled(node, true)
		-- Now, acquire input. We're gonna be on top of
		-- the input stack. Yay!
		msg.post(".", "acquire_input_focus")
	end
end

function on_input(self, action_id, action)
	if action_id == hash("click") or action_id == hash("touch") then
		
		if action.pressed then
			handle_press(self, action.x, action.y)
		end
		if action.released then
			handle_click(self, action.x, action.y)
		end
	end
	
	handle_hover(self, action.x, action.y)
	
	-- As long as we're listening to input, we're gonna consume it.
	-- This disables game controls while the pause menu is showing.
	return true
end