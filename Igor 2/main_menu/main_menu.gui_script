require "main_menu.collection_proxy_content"
require "main_menu.ui_func"
require "variables"

function init(self)
	if gui_log then
		print("Экран главного меню проинициализирован")
	end
	local values = { 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1,
	0, 0, 0, 0, 0, 0, 1, 1,
	0, 0, 0, 0, 0, 1, 1, 1,
	0, 0, 0, 0, 1, 1, 1, 1,
	0, 0, 0, 1, 1, 1, 1, 1,
	0, 0, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	--0, 0, 0, 0, 0, 0, 0, 0 
	0, 1, 1, 1, 1, 1, 1, 1,
	0, 0, 1, 1, 1, 1, 1, 1,
	0, 0, 0, 1, 1, 1, 1, 1,
	0, 0, 0, 0, 1, 1, 1, 1,
	0, 0, 0, 0, 0, 1, 1, 1,
	0, 0, 0, 0, 0, 0, 1, 1,
	0, 0, 0, 0, 0, 0, 0, 1,
	0, 0, 0, 0, 0, 0, 0, 0 }
	local vec = vmath.vector(values)
	local node = gui.get_node("background")
	gui.animate(node, "position.x", -120, vec, 400.0, -45, nil, gui.PLAYBACK_LOOP_BACKWARD)
	msg.post(".", "acquire_input_focus")
	
    --gui.set_color(gui.get_node("exit_button"), self.normal_color);
    --gui.set_color(gui.get_node("start_button"), self.normal_color);
    self.hovered_node = nil
	self.picked_node = nil
    self.nodes = {
					{
						node = gui.get_node("start_button"),
						action = function ()
							if gui.is_enabled(gui.get_node("start_button")) then
								in_game = true
								
								msg.post("start_scene:/collection_proxy_controller#collection_proxy_controller", "load", {proxy = "#main_proxy"})

								if gui_log then
									print("Нажата кнопка старт, загружен прокси main коллекции")
								end
							end
						end
					},
					{
						node = gui.get_node("exit_button"),
						action = function ()
							if gui.is_enabled(gui.get_node("exit_button")) then
								msg.post("@system:", "exit", {code = 0})

								if gui_log then
									print("Нажата кнопка выхода, приложение закрыто")
								end
							end
						end 
					},
					{
						node = gui.get_node("settings_button"),
						action = function ()
							if gui.is_enabled(gui.get_node("settings_button")) then
								gui.set_enabled(gui.get_node("start_button"), false)
								gui.set_enabled(gui.get_node("exit_button"), false)
								gui.set_enabled(gui.get_node("title"), false)
								
								msg.post("/menu#settings", "show")

								if gui_log then
									print("Нажата кнопка настроек, скрыт интерфейс главного меню")
								end
							end
						end
					}
				}
				
				init_ui(self)
				
end

function final(self)
	msg.post(".", "release_input_focus")
	--msg.post("start_scene:/sound#sound", "sound_off");
end

function on_message(self, message_id, message, sender)
	if message_id == hash("show") then
		
		gui.set_enabled(gui.get_node("start_button"), true)
		gui.set_enabled(gui.get_node("exit_button"), true)
		gui.set_enabled(gui.get_node("title"), true)
		
		msg.post(".", "acquire_input_focus")
		
		if gui_log then
			print("Пришло сообщение о включении интерфейса главного меню от", sender, "Показан интерфейс главного меню")
		end
	end
end
	
function on_input(self, action_id, action)
    if action_id == hash("click") or action_id == hash("touch") then
    	if action.pressed then
	    	handle_press(self, action.x, action.y)
    	end
    	if action.released then
			handle_click(self, action.x, action.y)
    	end
	end
	
	handle_hover(self, action.x, action.y)
end

local function anim(node)
	--gui.animate(node, "position.x", 100, gui.EASING_IN, 1, gui.PLAYBACK_LOOP_BACKWARD)
	gui.animate(node, "position.x", 1000, vec, 4.0, 1, nil, gui.PLAYBACK_LOOP_BACKWARD)
end