require "main_menu.ui_func"
require "variables"

function init(self)
	gui.set_enabled(gui.get_node("background"), false)
	
	self.hovered_node = nil
	self.picked_node = nil

	self.nodes = {
					{
						node = gui.get_node("sound_button"),
						action = function ()
							if gui.is_enabled(gui.get_node("background")) then
								if sound then
									sound = false
									gui.play_flipbook(gui.get_node("sound_button"), "music_off")

									if in_game then
										msg.post("level:/sound#sound", "sound_off")
									else
										msg.post("default:/sound#sound", "sound_off")
									end

									if gui_log then
										print("Нажата кнопка звука, звук должен был быть включен, нажали на кнопку, выключаем")
									end
								else
									sound = true
									gui.play_flipbook(gui.get_node("sound_button"), "music_on")

									if in_game then
										msg.post("level:/sound#sound", "sound_on")
									else
										msg.post("default:/sound#sound", "sound_on")
									end

									if gui_log then
										print("Нажата кнопка звука, звук должен был быть выключен, нажали на кнопку, включаем")
									end
								end
							end
						end
					},
					{
						node = gui.get_node("close_button"),
						action = function ()
							--finish_anim(gui.get_node("background"))
							if gui.is_enabled(gui.get_node("background")) then
								gui.set_enabled(gui.get_node("background"), false)
								
								if in_game and deathscreen_state then
									msg.post("default:/death_screen#death_screen", "show")
								elseif not in_game then
									msg.post("/menu#main_menu", "show")
								end
								
								msg.post(".", "release_input_focus")

								if gui_log then
									print("Нажата кнопка закрытия окна, окно настроек закрыто")
								end
							end
						end
					},
					{
						node = gui.get_node("autorestart_button"),
						action = function ()
							if gui.is_enabled(gui.get_node("background")) then
								if autorestart_state then
									gui.set_text(gui.get_node("autorestart_state"), "no")
									autorestart_state = false
								else
									gui.set_text(gui.get_node("autorestart_state"), "yes")
									autorestart_state = true
								end

								if gui_log then
									print("Нажата кнопка авторестарта, состояние авторестарта изменено на", autorestart_state)
								end
							end
						end
					},
					{
						node = gui.get_node("training_button"),
						action = function ()
							if gui.is_enabled(gui.get_node("background")) then
								if training_state then
									gui.set_text(gui.get_node("training_state"), "no")
									training_state = false
								else
									gui.set_text(gui.get_node("training_state"), "yes")
									training_state = true
								end

								if gui_log then
									print("Нажата кнопка переключения тренировки, состояние авторестарта изменено на", training)
								end
							end
						end
					}
				}

	init_ui(self)
end

function finish_anim(node)
	gui.animate(node, "position.y", -150, gui.EASING_INCUBIC, 0.5, 0, nil, gui.PLAYBACK_ONCE_FORWARD)
end

function final(self)
	--[[local node = gui.get_node("background")
	gui.animate(node, "position.y", 0, gui.EASING_INCUBIC, 1, 0, nil, gui.PLAYBACK_ONCE_BACKWARD)]]
end

function on_message(self, message_id, message, sender)
	if message_id == hash("show") then
		gui.set_enabled(gui.get_node("background"), true)
		
		local node = gui.get_node("background")
		gui.animate(node, "position.y", 100, gui.EASING_INCUBIC, 0.5, 0, nil, gui.PLAYBACK_ONCE_BACKWARD)
		
		if sound then
			gui.play_flipbook(gui.get_node("sound_button"), "music_on")
		else
			gui.play_flipbook(gui.get_node("sound_button"), "music_off")
		end

		if autorestart_state then
			gui.set_text(gui.get_node("autorestart_state"), "yes")
		else
			gui.set_text(gui.get_node("autorestart_state"), "no")
		end

		if training_state then
			gui.set_text(gui.get_node("training_state"), "yes")
		else
			gui.set_text(gui.get_node("training_state"), "no")
		end
		
		if in_game then
			msg.post(".", "acquire_input_focus")
		end

		if gui_log then
			print("Пришло сообщение о включении экрана настроек от", sender, "Показан экран настроек")
		end
	end
end

function on_input(self, action_id, action)
	if action_id == hash("click") or action_id == hash("touch") then

		if action.pressed then
			handle_press(self, action.x, action.y)
		end
		if action.released then
			handle_click(self, action.x, action.y)
		end
	end

	handle_hover(self, action.x, action.y)

	return true
end