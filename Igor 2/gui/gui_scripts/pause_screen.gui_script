require "main_menu.ui_func"
require "variables"
function init(self)
	gui.set_enabled(gui.get_node("background"), false)

	if gui_log then
		print("Экран паузы проинициализирован")
	end
	
	self.hovered_node = nil
	self.picked_node = nil
	
	self.nodes = {
					{
						node = gui.get_node("resume"),
						action = function () 
							--finish_anim(gui.get_node("background"))
							gui.set_enabled(gui.get_node("background"), false)
							
							msg.post("/hud", "resume")
							msg.post(".", "release_input_focus")

							if gui_log then
								print("Нажата кнопка продолжить, скрыт интерфейс паузы")
							end
						end
					},
					{
						node = gui.get_node("menu"),
						action = function () 
							in_game = false
							--pause_state = false
							--gui.set_enabled(gui.get_node("background"), false)
							
							msg.post("start_scene:/collection_proxy_controller#collection_proxy_controller", "load", {proxy = "#main_menu_proxy"})

							if gui_log then
								print("Нажата кнопка меню, загружен прокси главного меню")
							end
						end
					},
					{
						node = gui.get_node("settings_button"),
						action = function () 
							msg.post("default:/settings#settings", "show")
							
							if gui_log then
								print("Нажата кнопка настроек")
							end
						end
					}
				}
	
	init_ui(self)
end

function finish_anim(node)
	gui.animate(node, "position.y", -150, gui.EASING_INCUBIC, 0.3, 0, nil, gui.PLAYBACK_ONCE_FORWARD)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("show") then
		
		gui.set_enabled(gui.get_node("background"), true)
		local node = gui.get_node("background")
		gui.animate(node, "position.y", 100, gui.EASING_INCUBIC, 0.3, 0, nil, gui.PLAYBACK_ONCE_BACKWARD)
		msg.post(".", "acquire_input_focus")

		if gui_log then
			print("Пришло сообщение о включении экрана паузы от", sender, "Показан экран паузы")
		end
	end
end

function on_input(self, action_id, action)
	if action_id == hash("click") or action_id == hash("touch") then
		
		if action.pressed then
			handle_press(self, action.x, action.y)
		end
		if action.released then
			handle_click(self, action.x, action.y)
		end
	end
	
	handle_hover(self, action.x, action.y)
	
	-- As long as we're listening to input, we're gonna consume it.
	-- This disables game controls while the pause menu is showing.
	return true
end