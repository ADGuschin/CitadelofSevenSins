require "level.obstacle_table"
require "level.utils"
-- controller.script
local grid = 600
local platform_height = 48
local default_speed = 360
local score = 0
local pause_state = false
local max_speed = 1500
local obstacle_var = 0
local reset_timer = 0
local reset_timer_max = 5

local previous_obstacle

acceleration = 20;

function table_length(self, table)
    local count = 0
    for x in pairs(table) do count = count + 1 end
    return count
end

function init(self)
    self.speed = default_speed
    update_speed(self)
    self.gridw = 0
    --self.heroes = {}
    previous_obstacle = obstacle_table["init"][math.random(table_length(self, obstacle_table["init"]))]
    msg.post("#", "spawnhero")
    print(msg.url())
end

function check_for_reset(self)
    if reset_timer < reset_timer_max then
        reset_timer = reset_timer + 1
    else 
        reset = false
    end
end

function update(self, dt)
    self.gridw = self.gridw + self.speed * dt
    self.speed = self.speed + acceleration * dt
    update_speed(self)
    check_for_reset(self)
    if self.gridw >= grid then
        self.gridw = 0
        local h = platform_height
        local allowed_obstacles = obstacle_table[previous_obstacle]
        local random = math.random(table_length(self, allowed_obstacles))
        grid = grid_table[allowed_obstacles[random]]
        pprint(grid_table[previous_obstacle])
        pprint(previous_obstacle)
        previous_obstacle = allowed_obstacles[random] 
        local p = collectionfactory.create(previous_obstacle, vmath.vector3(1600, h, 0), nil, {}, 5)
    end
    if not pause_state then
        score = score + self.speed / 10000
        msg.post("/score#score", "score", {value = math.ceil(score)})
    end

end

function on_message(self, message_id, message, sender)

    if message_id == hash("spawnhero") then
        local p = factory.create("#herofactory",vmath.vector3(300, 200, 0), nil,{},5)
        --table.insert(self.heroes, p)
        score = 0 
    elseif message_id == hash("reset") then 
        -- Tell the hero to reset.
        reset = true
        reset_timer = 0
        self.speed = default_speed
        msg.post("#", "spawnhero")
        msg.post("background3/controller#background3", "reset")
    elseif message_id == hash("reset_speed") then
        self.speed = self.speed * 0.66
        if self.speed < default_speed then
            self.speed = default_speed
        elseif self.speed > max_speed then
            self.speed = max_speed
        end
    elseif message_id == hash("pause_state") then
        pause_state = message.value
    elseif message_id == hash("speed_request") then
        msg.post(sender, "set_speed", { speed = self.speed })
    elseif message_id == hash("death") then
        msg.post("default:/death_screen#death_screen", "score", {value = math.ceil(score)})
    end
end

function update_speed(self)
    msg.post("ground/controller#script", "set_speed", { speed = self.speed })
    msg.post("background1/controller#script", "set_speed", { speed = self.speed })
    msg.post("background2/controller#script", "set_speed", { speed = self.speed })
    msg.post("background3/controller#background3", "set_speed", { speed = self.speed })
end