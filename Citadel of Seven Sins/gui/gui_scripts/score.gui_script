require "variables"

record_state = false

local title = {
	score_text = { "Score:", "Счет:" },
	highscore_text = { "Highscore:", "Рекорд:" }
}

function init(self)
	
	if gui_log then
		print("Итерфейс счета проинициализирован")
	end
end

function final(self)
	save_gamedata()
end

function on_message(self, message_id, message, sender)
	if message_id == hash("change_multiplier") then
		local multiplier_name = "x1"
		local next_multiplier_name = current_score_multiplier.next
		if(next_multiplier_name == "none")then
			next_multiplier_name = ""
		end
		if(current_score_multiplier.current ~= "default")then
			multiplier_name = current_score_multiplier.current
		end
		gui.set_text(gui.get_node("current"), multiplier_name)
		gui.set_text(gui.get_node("next"), next_multiplier_name)
	elseif message_id == hash("coins") then
		gui.set_text(gui.get_node("coins_num"), message.value)
	elseif message_id == hash("score") then
		gui.set_text(gui.get_node("score_text"), title.score_text[language_state]) 
		gui.set_text(gui.get_node("highscore_text"), title.highscore_text[language_state]) 
		local score = message.value
		gui.set_text(gui.get_node("score_num"), score)
		gui.set_text(gui.get_node("highscore_num"), shared_data.player.highscore)
		if(current_score_multiplier.next ~= "none") then
			gui.animate(gui.get_node("bar"), "size", vmath.vector3((multiplier_bar*100/bar_maxs[current_score_multiplier.next]), 30, 0), gui.EASING_INCUBIC, 0)
		end
		shared_data.player.score = score
		if score > shared_data.player.highscore then
			shared_data.player.highscore = score
			record_state = true
		end

		--[[if gui_log then
			print("Пришло сообщение о счете от", sender, "Счет выведен на экран")
		end]]
	elseif message_id == hash("show") then
		gui.set_enabled(gui.get_node("score_box"), true)
		gui.set_enabled(gui.get_node("coins_box"), true)
		gui.set_enabled(gui.get_node("multiplier_box"), true)
		gui.set_text(gui.get_node("score_text"), title.score_text[language_state]) 
		gui.set_text(gui.get_node("highscore_text"), title.highscore_text[language_state]) 
		if gui_log then
			print("Пришло сообщение о включении интерфейса очков от", sender, "Интерфейс показан")
		end
	elseif message_id == hash("hide") then
		gui.set_enabled(gui.get_node("score_box"), false)
		gui.set_enabled(gui.get_node("multiplier_box"), false)
		if not deathscreen_state then
			gui.set_enabled(gui.get_node("coins_box"), false)
		end
		
		if gui_log then
			print("Пришло сообщение о скрытии интерфейса очков от", sender, "Интерфейс скрыт")
		end
	end
end

--[[function update()
	gui.set_text(gui.get_node("score_text"), title.score_text[language_state]) 
	gui.set_text(gui.get_node("highscore_text"), title.highscore_text[language_state]) 
end]]

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add input-handling code here
	-- Remove this function if not needed
end