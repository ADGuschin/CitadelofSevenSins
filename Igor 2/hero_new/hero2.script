local gravity = -50
local jump_takeoff_speed = 1300
local isSliding = 0
local isFirstTimeRun = true
local slide_cooldown_max = 15
local slide_cooldown = 15
local slide_time = 30
local pushed = false
local current_posititon
local catch_up_speed = 50
local jump_break_speed = -2000


function init(self)
	msg.post(".", "acquire_input_focus")
	self.position = go.get_position()
	current_posititon = self.position.x
	self.velocity = vmath.vector3(0,0,0)
	msg.post("#running_state", "enable")
	msg.post("#sliding_state", "disable")
end

function final(self)
	msg.post(".", "release_input_focus")
end

local function play_animation(self, anim)
	if self.anim ~= anim then
		msg.post("#sprite", "play_animation", {id = anim})
		self.anim = anim
	end
end


local function update_animation(self)
	if self.ground_contact then
		if isSliding > 0 then
			play_animation(self, hash("player_slide"))
		else
			if self.velocity.x > 0 then
				play_animation(self, hash("player_fast_right"))
			else
				play_animation(self, hash("player_right"))
			end
		end
	else
		if(self.velocity.y > 0) then
			play_animation(self, hash("player_jump"))
		else
			if self.velocity.y <= jump_break_speed then
				play_animation(self, hash("break_jump"))
			else
				play_animation(self, hash("player_fall"))
			end
		end
	end
end

function update(self, dt)
	local gravity = vmath.vector3(0, gravity, 0)
	
	local hero_position = go.get_position()
	
	if not self.ground_contact then
		self.velocity = self.velocity + gravity
	end
	
	if self.velocity.y ~= 0 then
		isSliding = 0
	end

	if self.velocity.x < 0 then
		self.velocity.x = self.velocity.x + 50
	else
		pushed = false
	end
	
	if hero_position.x < 360  then
		if not pushed then
			self.velocity.x = catch_up_speed
		end
	else
		self.velocity.x = 0	
	end
	
	if slide_cooldown < slide_cooldown_max then
		slide_cooldown = slide_cooldown + 1
	end

	if isSliding == 0 then
		msg.post("#running_state", "enable")
		msg.post("#sliding_state", "disable")
	end
	
	if isSliding > 0 then
		isSliding = isSliding + 1
		slide_cooldown = 0
		if isSliding == slide_time then
			isSliding = 0
		end
	end
	
	go.set_position(go.get_position() + self.velocity * dt)
	
	update_animation(self)
	
	self.correction = vmath.vector3()
	self.ground_contact = false
end

local function roll_over(self)
end

local function on_impact(self, impact_type)
	if impact_type == "hard" then
		play_animation(self, hash("hero_impact"))
		msg.post("/level/controller#script", "reset_speed")
		self.velocity.y = 750
		self.velocity.x = -1250
		pushed = true
	elseif impact_type == "small" then
		roll_over(self)
	end
end

local function handle_geometry_contact(self, normal, distance)
	local proj = vmath.dot(self.correction, normal)
	local comp = (distance - proj) * normal
	self.correction = self.correction + comp
	go.set_position(go.get_position() + comp)
	if normal.y > 0.7 then
		self.ground_contact = true
	end
	proj = vmath.dot(self.velocity, normal)
	if proj < 0 then
		self.velocity = self.velocity - proj * normal
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("reset") then
		msg.post("/level/controller#script", "spawnhero")
		msg.post("#running_state", "enable")
	elseif message_id == hash("contact_point_response") then
		if message.group == hash("danger") then
			play_animation(self, hash("player_die"))
			msg.post("#running_state", "disable")
			if isFirstTimeRun == false then
				msg.post("/level/controller#script", "reset")
			end
			isFirstTimeRun = false
		elseif message.group == hash("geometry") then
			handle_geometry_contact(self, message.normal, message.distance)
		elseif message.group == hash("still_slide") then
			isSliding = slide_time / 2
		elseif message.group == hash("impact") then
			on_impact(self, "hard")
			
		end
	end
end

local function jump(self)
	if self.ground_contact then
		self.velocity.y = jump_takeoff_speed
	end
end

local function abort_jump(self)
	if self.velocity.y > 0 then
		self.velocity.y = self.velocity.y * 0.4
	end
end

local function slide(self)
	msg.post("#sliding_state", "enable")
	msg.post("#running_state", "disable")
	isSliding = 1
end

local function jump_break(self)
	self.velocity.y = jump_break_speed
end

local function break_slide(self)--на всякий пожарный,	 можно перенести в апдейт
	isSliding = 0
	play_animation(self, hash("break_slide"))
end

function on_input(self, action_id, action)
	if action_id == hash("jump") or action_id == hash("touch") then
		if action.pressed then
			if isSliding ~= 0 then
				break_slide(self)--на всякий пожарный
			end
			jump(self)
		elseif action.released then
			abort_jump(self)
		end
	end
	if action_id == hash("slide") and slide_cooldown == slide_cooldown_max then
		if self.ground_contact then
			slide(self)
		else 
			jump_break(self)
		end
	end
end
