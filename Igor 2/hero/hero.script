local gravity = -35
local jump_takeoff_speed = 1200

function init(self)
	msg.post(".", "acquire_input_focus")
	self.position = go.get_position()
	msg.post("#", "reset")
end

function final(self)
	msg.post(".", "release_input_focus")
end

local function play_animation(self, anim)
	if self.anim ~= anim then
		spine.play("#spinemodel", anim, go.PLAYBACK_LOOP_FORWARD, 0.15)
		self.anim = anim
	end
end

local function update_animation(self)
	if self.ground_contact then
		play_animation(self, hash("run_right"))
	else
		if(self.velocity.y > 0) then
			play_animation(self, hash("jump_right"))
		else
			play_animation(self, hash("fall_right"))
		end
	end
end

function update(self, dt)
	local gravity = vmath.vector3(0, gravity, 0)
	
	if not self.ground_contact then
		self.velocity = self.velocity + gravity
	end
	
	go.set_position(go.get_position() + self.velocity * dt)
	
	update_animation(self)
	
	self.correction = vmath.vector3()
	self.ground_contact = false
end

local function handle_geometry_contact(self, normal, distance)
	local proj = vmath.dot(self.correction, normal)
	local comp = (distance - proj) * normal
	self.correction = self.correction + comp
	go.set_position(go.get_position() + comp)
	if normal.y > 0.7 then
		self.ground_contact = true
	end
	proj = vmath.dot(self.velocity, normal)
	if proj < 0 then
		self.velocity = self.velocity - proj * normal
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("reset") then
		self.velocity = vmath.vector3(0, 0, 0)
        self.correction = vmath.vector3()
        self.ground_contact = false
        self.anim = nil
        go.set(".", "euler.z", 0)
        go.set_position(self.position)
        msg.post("#collisionobject", "enable")
	elseif message_id == hash("contact_point_response") then
		if message.group == hash("danger") then
		play_animation(self, hash("die_right"))
		msg.post("#collisionobject", "disable")
		go.animate(".", "euler.z", go.PLAYBACK_ONCE_FORWARD, 160, go.EASING_LINEAR, 0.7)
		go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, go.get_position().y - 200, go.EASING_INSINE, 0.5, 0.2,
                function()
                    msg.post("#", "reset")
                end)
		elseif message.group == hash("geometry") then
			handle_geometry_contact(self, message.normal, message.distance)
		end
	
	end
end

local function jump(self)
	if self.ground_contact then
		self.velocity.y = jump_takeoff_speed
	end
end

local function abort_jump(self)
	if self.velocity.y > 0 then
		self.velocity.y = self.velocity.y * 0.4
	end
end

function on_input(self, action_id, action)
	if action_id == hash("jump") or action_id == hash("touch") then
		if action.pressed then
			jump(self)
		elseif action.released then
			abort_jump(self)
		end
	end
end