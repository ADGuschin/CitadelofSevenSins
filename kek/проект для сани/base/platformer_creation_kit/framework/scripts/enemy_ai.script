local input_left = hash("left")
local input_right = hash("right")
local input_jump = hash("jump")

go.property("collision_box_center", vmath.vector3(0,0,0))
go.property("collision_box_size", vmath.vector3(0,0,0))
go.property("follow_player", false)
go.property("patrol", false)
go.property("provokable", false)
go.property("follow_distance", 500)
go.property("can_be_lost", false)
go.property("max_investigation_time", 3)

local ray_length = 10
local skin_width = 5

function init(self)
	self.last_position = go.get_position()
	self.raycast_groups = { hash("obstacle") }
	self.following_player = false
	self.patrolling_direction = 1
	self.investigate = false
	self.investigation_spot = nil
	self.investigation_time = 0;
	msg.post("#health", "register")
end

function update(self, dt)
    local player_pos = go.get_position("hero")
    local my_pos = go.get_position()
    local dir = player_pos - my_pos
    local dir_x = 0;
   	local distance = vmath.length(dir)
    
    if self.can_be_lost and distance > self.follow_distance then
    	self.following_player = false
    elseif distance <= self.follow_distance and (self.follow_player or self.investigate) then
    	self.following_player = true
    end
    
    if self.following_player then
	    if dir.x < 0 then
	    	msg.post("#movement", input_left, {value = 1})
	    	dir_x = -1 
	    elseif dir.x > 0 then
	    	msg.post("#movement", input_right, {value = 1})
	    	dir_x = 1
	    end
    elseif self.investigate then
    	dir = self.investigation_spot - my_pos
    	if dir.x < 0 then
	    	msg.post("#movement", input_left, {value = 1})
	    	dir_x = -1 
	    elseif dir.x > 0 then
	    	msg.post("#movement", input_right, {value = 1})
	    	dir_x = 1
	    end
	    if math.abs(dir.x) < 100 then
	    	self.investigation_time = self.investigation_time - dt;
	    	if (self.investigation_time < 0) then
	    		self.investigate = false;
	    		self.patrolling_direction = dir_x
	    	end
	    end
    elseif self.patrol then
    	if self.patrolling_direction < 0 then
    		msg.post("#movement", input_left, {value = 1})
    		dir_x = -1 
    	elseif self.patrolling_direction > 0 then
			msg.post("#movement", input_right, {value = 1})
			dir_x = 1 
		end
	end
    
    if dir_x ~= 0 then
	    for i = 0, 3 do
	    	local x = (dir_x * (self.collision_box_size.x / 2 - skin_width)  + self.collision_box_center.x) * go.get_scale_vector().x
	    	local y = (-self.collision_box_size.y / 2 + i * self.collision_box_size.y / 3 + self.collision_box_center.y) * go.get_scale_vector().y
	    	ray_pos = my_pos + vmath.vector3(x, y, 0)
	    	ray_end = my_pos + vmath.vector3(x + ray_length * dir_x, y, 0)
	    	physics.ray_cast(ray_pos, ray_end, self.raycast_groups, 0)
	    end
    end
    
    self.last_position = go.get_position()
end

local function obstacle_in_front(self)
	if self.patrol then
		self.patrolling_direction = -self.patrolling_direction
	end
	if self.following_player or self.investigate then
		msg.post("#movement", input_jump, {pressed = true})
	end
end

local function ledge()
	
end

function on_message(self, message_id, message, sender)
	if message_id == hash("ray_cast_response") then
		--
		obstacle_in_front(self)
	end
	if message_id == hash("change_health") then
		if message.health_change < 0 then
			if self.provokable then
				self.investigate = true;
				self.investigation_spot = go.get_position("hero")
				self.investigation_time = self.max_investigation_time
			end
		end
	end
end