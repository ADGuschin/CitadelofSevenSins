require "main_menu.ui_func"

local pause_state = false

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("#level_proxy", "load")
	--
	self.hovered_node = nil
	self.picked_node = nil
	
	gui.set_enabled(gui.get_node("soundon_button"), false);
	msg.post("start_scene:/sound#sound", "sound_on")
	
	self.nodes = {
					{
						node = gui.get_node("pause_button"),
						action = function () pause_state = true; msg.post("/pause_screen", "show"); msg.post("#level_proxy", "set_time_step", {factor = 0, mode = 1}); msg.post("level:/controller#script", "pause_state", {value = true}) end
					},
					{
						node = gui.get_node("soundoff_button"),
						action = function () msg.post("start_scene:/sound#sound", "sound_off"); gui.set_enabled(gui.get_node("soundoff_button"), false); gui.set_enabled(gui.get_node("soundon_button"), true) end
					},
					--[[{
						node = gui.get_node("soundon_button"),
						action = function () --[[msg.post("level:/sound#sound", "sound_on"); gui.set_enabled(gui.get_node("soundon_button"), false); gui.set_enabled(gui.get_node("soundoff_button"), true) end
					},]]
					--[[{
						node = gui.get_node("slide_button"),
						action = function ()  msg.post("level:/controller#script", "slide") end
					}]]
				}
	
	init_ui(self)
	--
end

function final(self)
	msg.post(".", "release_input_focus")
end

function on_message(self, message_id, message, sender)
	if message_id == hash("proxy_loaded") then
		msg.post(sender, "enable")
	elseif message_id == hash("resume") then
		pause_state = false
		msg.post("#level_proxy", "set_time_step", {factor = 1, mode = 1})
		msg.post("level:/controller#script", "pause_state", {value = false})
	elseif message_id == hash("check_for_pause") then
		msg.post(sender, "pause_state", {value = pause_state})
	elseif message_id == hash("death_pause") then
		if message.value then
			pause_state = true
			msg.post("level:/controller#script", "pause_state", {value = true})
		else
			pause_state = false
			msg.post("level:/controller#script", "pause_state", {value = false})
		end
	end
end

function on_input(self, action_id, action)
	if action_id == hash("click") or action_id == hash("touch") then
		if action.pressed then
			handle_press(self, action.x, action.y)
		end
		if action.released then
			handle_click(self, action.x, action.y)
		end
	end
	
	handle_hover(self, action.x, action.y)
end