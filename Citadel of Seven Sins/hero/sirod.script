require "variables"
require "hero/all"
require "hero/variables"

function init(self)
	--test(self)
	current_progress = 0
	current_boss_progress = 0
	msg.post("@system:", "toggle_physics_debug")
	msg.post(".", "acquire_input_focus")
	msg.post(current_level..":/controller#script", "spawned") 
	self.position = go.get_position()
	self.velocity = vmath.vector3(0,0,0)
	enable_running_state(self)
	alive = true
	self.platform_contact_from_below = false
	self.platform_contact_from_below_last_frame = false
end

function reset_multiplier(self)
	msg.post("controller#script", "reset_multiplier")
	current_score_multiplier = score_multiplier["default"]
	multiplier_bar = 0
end

function final(self)
	reset_multiplier(self)
	msg.post(".", "release_input_focus")
end




function update(self, dt)
	if not pause_state then

		local hero_posititon = go.get_position()
		--msg.post(current_level..":/camera#camera_controller", "watch_to_hero", {pos = hero_position})

		check_slide(self)

		prepare_slide_update(self)
		
		impact_speed_change(self, dt)

		check_for_ground_contact(self)

		check_for_jump(self)

		lock_character_update(self)
		
		check_inv(self)
		
		slide_cooldown_tick(self)

		correct_x_pos(self, hero_posititon)
		
		go.set_position(go.get_position() + self.velocity * dt)

		update_animation(self)
		
		--update_sound(self)
		
		self.correction = vmath.vector3()
		roll_allowed = false
		pole_in_range = false
		self.ground_contact = false
		self.platform_contact_from_below_last_frame = self.platform_contact_from_below
		self.platform_contact_from_below = false
	end
end


local function on_impact(self, impact_type)
	if impact_type == "hard" then
		alive = false
		play_animation(self, hash("player_die"))
		set_state(self, "dead")
		if autorestart_state then
			go.delete(true)
			msg.post(current_level..":/controller#script", "reset")
		else
			msg.post("default:/death_screen#death_screen", "death")
			msg.post(current_level..":/controller#script", "death")  
		end
	elseif impact_type == "soft" then
		roll_allowed = true
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("continue") then
		msg.post("controller#script", "spawnhero", {continue = true})
		go.delete(true)
	elseif message_id == hash("contact_point_response") then
		local pos = go.get_position()
		if (message.group == hash("danger") or pos.x < 10) and alive and not invincible then
			alive = false
			play_animation(self, hash("player_die"))
			set_state(self, "dead")
			if autorestart_state then
				go.delete(true)
				msg.post(current_level..":/controller#script", "reset")
			else
				msg.post("default:/death_screen#death_screen", "death")
				msg.post(current_level..":/controller#script", "death")  
			end
		elseif message.group == hash("still_slide") then
			current_slide_moment = (2*slide_time) / 3
		elseif (message.group == hash("impact") and not pushed and not invincible) then
			on_impact(self, "hard")
		elseif message.group == hash("impact_soft") then
			on_impact(self, "soft")
		elseif message.group == hash("pole") then
			pole_in_range = true
		elseif message.group == hash("geometry") then
			handle_geometry_contact(self, message.normal, message.distance)
		elseif (message.group == hash("obstacle") and not (pushed or invincible)) then
			handle_geometry_contact(self, message.normal, message.distance)
		elseif message.group == hash("obstacle") and (invincible or pushed) then
			invincibility = 0.6*invincibility_max
			if message.normal.y > 0 then
				if not self.platform_contact_from_below_last_frame then
					handle_geometry_contact(self, message.normal, message.distance)
					self.platform_contact_from_below = false
				else
					self.platform_contact_from_below = true
				end
			else
				self.platform_contact_from_below = true
			end
		elseif message.group == hash("rolling_platform") then
			handle_geometry_contact(self, message.normal, message.distance)
		elseif message.group == hash("coin") then
			play_sound(self, "coin")
			coins = coins + 1
		elseif message.group == hash("coin2") then
			play_sound(self, "coin")
			coins = coins + 2
		elseif message.group == hash("coin3") then
			play_sound(self, "coin")
			coins = coins + 3
		end
	end
end

local touch

function touch_on_input(self, action_id, action)
	if action.x > 50 and action.x < 150 and action.y < 670 and action.y > 570 then
	else
		if action.x > 750 then
			if roll_allowed then
				roll(self)
			elseif pole_in_range then
				pole_jump(self)
			else
				dash(self)
			end
		elseif action.y < 300 then
			if self.ground_contact then
				slide(self)
			else
				jump_break(self)
			end
		else
			if action.pressed then
				jump(self, jump_takeoff_speed)
			end
		end
	end

	if action.released then
		if not self.ground_contact then
			abort_jump(self)
		end
	end
	
end

local debug = false

function on_input(self, action_id, action)
	if action_id == hash("debug_on") and not debug then 
		msg.post("@system:", "toggle_physics_debug")
		debug = true
	elseif action_id == hash("debug_off") and debug then 
		msg.post("@system:", "toggle_physics_debug")
		debug = false
	end

	if action_id == hash("restart_game") then
		msg.post("start_scene:/collection_proxy_controller#collection_proxy_controller", "load", {proxy = "#main_proxy"}) 
	end
	if not lock_character then
		if action_id == hash("click") then 
			
			touch_on_input(self, action_id, action)
		end
		if action_id == hash("jump") then
			if action.pressed then
				if current_slide_moment ~= 0 then
					break_slide(self)--на всякий пожарный
				end
				jump(self, jump_takeoff_speed)
			elseif action.released then
				abort_jump(self)
			end
		end
		if action_id == hash("back_clicked") then
			msg.post("default:/hud#hud", "pause")
		end
		if action_id == hash("slide") and slide_cooldown == slide_cooldown_max then
			if self.ground_contact then
				slide(self)
			else 
				jump_break(self)
			end
		end
		if action_id == hash("roll_over") then
			if roll_allowed then
				roll(self)
			elseif pole_in_range then
				pole_jump(self)
			else
				dash(self)
			end
		end
	end
end

function final(self)
	current_level_coins = 0
end