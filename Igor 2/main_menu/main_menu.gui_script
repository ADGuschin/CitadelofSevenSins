function init(self)
    msg.post(".", "acquire_input_focus")
    --gui.set_color(gui.get_node("quit_btn"), self.normal_color);
    --gui.set_color(gui.get_node("start_btn"), self.normal_color);
    self.hovered_node = nil
    self.picked_node = nil
    self.nodes = {
        {
            node = gui.get_node("quit_btn"),
            action = function () msg.post("@system:", "exit", {code = 0}) end 
        },
        {
            node = gui.get_node("start_btn"),
            action = function () msg.post("main:/collection_proxy_controller#controller", "load", {proxy = collection_proxies[2]}) end
        },
        {
            node = gui.get_node("story2_btn"),
            action = function () msg.post("main:/collection_proxy_controller#controller", "load", {proxy = collection_proxies[3]}) end
        },
        {
            node = gui.get_node("story3_btn"),
            action = function () msg.post("main:/collection_proxy_controller#controller", "load", {proxy = collection_proxies[4]}) end
        },
        {
            node = gui.get_node("story4_btn"),
            action = function () msg.post("main:/collection_proxy_controller#controller", "load", {proxy = collection_proxies[5]}) end
        },
        {
            node = gui.get_node("mystory_btn"),
            action = function () msg.post("main:/collection_proxy_controller#controller", "load", {proxy = collection_proxies[6]}) end
        },
    }
    init_ui(self)
end

function on_input(self, action_id, action)
    if action_id == hash("click") or action_id == hash("touch") then
        if action.pressed then
            handle_press(self, action.x, action.y)
        end
        if action.released then
            handle_click(self, action.x, action.y)
        end
    end
    handle_hover(self, action.x, action.y)
end

[[function init(self)
    -- start animations for all nodes
    -- background, button-boxes and text are animated equally
    -- d is the animation start delay
    local d = 0.4
    anim1(gui.get_node("new_game"), d)
    d = 0.3
    anim1(gui.get_node("quit"), d)

    d = 0.1
    anim1(gui.get_node("background"), d)
end

local function anim1(node, d)
    -- set scale to 70%
    local start_scale = 0.7
    gui.set_scale(node, vmath.vector4(start_scale, start_scale, start_scale, 0))

    -- get current color and set alpha to 0 to fade up
    local from_color = gui.get_color(node)
    local to_color = gui.get_color(node)
    from_color.w = 0
    gui.set_color(node, from_color)

    -- animate alpha value from 0 to 1
    gui.animate(node, gui.PROP_COLOR, to_color, gui.EASING_IN, 0.2, d)

    -- animate scale from %70 to 110%
    local s = 1.1
    gui.animate(node, gui.PROP_SCALE, vmath.vector4(s, s, s, 0), gui.EASING_IN, 0.2, d, anim2)
end]]
