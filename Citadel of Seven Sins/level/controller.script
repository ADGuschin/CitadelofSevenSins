require "level.misc_objects"
require "level.story_levels.level_1.obstacle_table"
require "level.utils"
require "variables"
-- controller.script
local grid = 600
local grido = 2100
local platform_height = 48
local default_speed = 450

local max_speed = 1500
local obstacle_var = 0
local reset_timer = 0
local reset_timer_max = 5
local current_hero

local boss = false

local stage_phase = true

local current_dt


function init(self)
	current_obstacle = 1
	window.set_dim_mode(window.DIMMING_OFF)
	print(current_level)
	self.speed = default_speed
	update_speed(self)
	self.gridbackground = 0
	msg.post("#", "spawnhero")
end


function check_for_reset(self)
	if reset_timer < reset_timer_max then
		reset_timer = reset_timer + 1
	else 
		reset = false
	end
end


function calculate_score(self)
	if not pause_state then
		score = score + self.speed / 10000
		current_progress = current_progress + 1
		msg.post("/score#score", "progress", {value = math.ceil(current_progress*100/max_level_progress[current_level])})
		msg.post("/score#score", "score", {value = math.ceil(score)})
		msg.post("/score#score", "coins", {value = coins})
	end
end

function update(self, dt)
	current_dt = dt
	local value = math.ceil(current_progress*100/max_level_progress[current_level])
	
	if current_progress >= obstacles[current_obstacle].distance and stage_phase then
		factory.create(obstacles[current_obstacle].type, vmath.vector3(1500, 180, 0), nil,{},1)
		if obstacles[current_obstacle + 1] ~= nil then 
			current_obstacle = current_obstacle + 1
		else
			stage_phase = false 
		end
	end
	
	
	if value >= 100 and not boss_phase then
		boss_phase = true
		stage_phase = false
		factory.create("#"..current_level.."_boss", vmath.vector3(1200, 180, 0), nil,{},1)
	end
	if self.speed < max_speed then 
		self.speed = self.speed + acceleration * dt
	end
	
	check_for_reset(self)
	
	calculate_score(self)

end

function on_message(self, message_id, message, sender)
	if message_id == hash("spawnhero") then
		local p = factory.create("#herofactory",vmath.vector3(300, 142, 0), nil,{},1)
		if message.continue == nil then
			score = 0 
		end
	elseif message_id == hash("spawned") then
		current_hero = sender
	elseif message_id == hash("continue") then
		msg.post(current_hero, "continue")
	elseif message_id == hash("reset") then 
		save_gamedata()
		current_obstacle = 1
		reset = true
		reset_timer = 0
		self.speed = default_speed
		msg.post("#", "spawnhero")
		print(current_level)
		msg.post("background_"..current_level.."/controller#background", "reset")
		msg.post("background_"..current_level.."_loop/controller#background_loop", "reset")
	elseif message_id == hash("reset_speed") then
		self.speed = self.speed * 0.77
		if self.speed < default_speed then
			self.speed = default_speed
		elseif self.speed > max_speed then
			self.speed = max_speed
		end
	elseif message_id == hash("speed_request") then
		msg.post(sender, "set_speed", { speed = self.speed })
	elseif message_id == hash("death") then
		msg.post("default:/death_screen#death_screen", "score", {value = math.ceil(score)})
	end
end

function update_speed(self)
	for _,s in ipairs(movable) do
		msg.post(s, "set_speed", { speed = self.speed })
	end
end